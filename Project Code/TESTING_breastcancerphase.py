# -*- coding: utf-8 -*-
"""BreastCancerPhase.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10biHRrLGlenSubZWkfpWnuRLzGTkhXqn
"""

from google.colab import drive
drive.mount("/content/gdrive")

!pip install spams

import warnings
import numpy as np
from keras.models import load_model
import keras.backend as K
import numpy as np
from keras.utils import np_utils
import pandas as pd
from skimage.transform import rotate
from skimage import io
from skimage.transform import resize
from skimage import io,color
K.set_image_data_format('channels_last')
warnings.filterwarnings('ignore')

def save_insitu(image,fullpath):
    io.imsave(fullpath,image)

def read_image(fullpath):
    images=[]
    count = 0
    patches=[]
    im = io.imread((fullpath))
    for m in range(0,5):
        for n in range(0,7):
            patches.append(im[256*m:256*(m+2),256*n:256*(n+2)])
            im2=resize(patches[-1],(224,224,3),mode='constant')
            for o in range(0,4):
                rotated=rotate(im2,o*90)
                count=count+1
                path=fullpath+str(count)+".png"
                #save_insitu(rotated,path)
                flipped=np.fliplr(rotated)
                count=count+1
                path=fullpath+str(count)+".png"
                #save_insitu(flipped,path)
                images.append(rotated)
                images.append(flipped)
    images = np.array(images)
    return images

def predictcancer(fullpath):
    votes = {"Normal":0,"Benign":0,"InSitu":0,"Invasive":0}
    chance= {"Normal":[],"Benign":[],"InSitu":[],"Invasive":[]}
    mapping = {3:"Normal",0:"Benign",1:"InSitu",2:"Invasive"}
    classes = ["Normal","Benign","InSitu","Invasive"]
    df_image = pd.DataFrame(index=range(0,280),
                  columns=["Image_Number","Benign","InSitu","Invasive","Normal","Prediction"])
    df_analysis = pd.DataFrame(index=range(0,4),
                  columns=["Class","Count","Chance"])
    df_analysis.fillna(0)
    df_image = df_image.fillna(0)
    df_image['Prediction'].astype(str)
    df_analysis['Class'].astype(str)
    fullpath = fullpath
    K.set_image_data_format('channels_last')
    warnings.filterwarnings('ignore')
    phase=""
    im = read_image(fullpath)
    model=load_model('/content/gdrive/My Drive/Breast Cancer Phase Detection/New Dataset/my_densenet')
    pred=model.predict(im, batch_size=40, verbose=0, steps=None)
    category=np.argmax(pred,axis=-1)  
    for i in range(280):
        df_image.loc[i]["Image_Number"] = i+1
        df_image.loc[i]["Benign"] = pred[i][0]*100
        df_image.loc[i]["InSitu"] = pred[i][1]*100
        df_image.loc[i]["Invasive"] = pred[i][2]*100
        df_image.loc[i]["Normal"] = pred[i][3]*100
        df_image.loc[i]["Prediction"] = category[i]
        if(category[i]==0):
            phase="Benign"
            votes[phase] += 1
            chance[phase].append(pred[i][category[i]])
        elif(category[i]==1):
            phase="InSitu"
            votes[phase] += 1
            chance[phase].append(pred[i][category[i]])
        elif(category[i]==2):
            phase="Invasive"
            votes[phase] += 1
            chance[phase].append(pred[i][category[i]])
        elif(category[i]==3):
            phase="Normal"
            votes[phase] += 1
            chance[phase].append(pred[i][category[i]])
    df_image['Prediction'] = df_image['Prediction'].map(mapping)
    df_image.to_csv("Results.csv")
    for i in range(0,4):
        df_analysis.loc[i]["Class"] = classes[i]
        df_analysis.loc[i]["Count"] = votes[classes[i]]
        df_analysis.loc[i]["Chance"] = np.mean(chance[classes[i]])*100
    df_analysis.to_csv("Analysis.csv")
    return df_image, df_analysis

df_image,df_analysis=predictcancer("t1.tif")

df_image.head(280)

df_analysis.head()

